package _programers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class 실패율 {

	public static void main(String[] args) {
		
		int N = 5;
		int[] stages = {2, 1, 2, 6, 2, 4, 3, 3};
		
		List<Stage> stageList = new ArrayList<>();
		
		for (int i = 1; i <= N; i++) {
			int reachCount = 0;
			int notClear = 0;
			for (int j = 0; j < stages.length; j++) {
				if (i <= stages[j]) {
					reachCount++;
					if(i == stages[j]) {
						notClear++;
					}
				}
			}
			double failPercent = reachCount == 0 ? 0 : (double)notClear/reachCount;
			stageList.add(new Stage(i, failPercent));
		}
		
//		Collections.sort(stageList, Comparator.comparingDouble(Stage::getFailPercent) .reversed() .thenComparingInt(Stage::getNumber)    );

//위의 코드에 대한 설명		
//		Collections.sort(list); => 이런 식으로 쓴다면 기본적으로 해당 list를 오름차순으로 정렬한다. 단, list안에 들어있는 dataType이 primitive Type이거나 String이어야 함(generic이 primitive Type이거나 String이어야 하는 거지)
		
		for (Stage stage : stageList) {
			System.out.println(stage.getFailPercent());			
		}
		
		
		int[] answer = new int[N];
		
		for (int i = 0; i < N; i++) {
			answer[i] = stageList.get(i).getNumber();
		}
		
		System.out.println(Arrays.toString(answer));
	}

}

class Stage {
	private int number;
	private double failPercent;
	
	public Stage(int number, double failPercent) {
		this.number = number;
		this.failPercent = failPercent;
	}
	
	public int getNumber() {
		return number;
	}
	
	public double getFailPercent() {
		return failPercent;
	}
}
