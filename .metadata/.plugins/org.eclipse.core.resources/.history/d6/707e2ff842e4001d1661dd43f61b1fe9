package _programers;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class 실패율 {

	public static void main(String[] args) {
		
		int N = 5;
		int[] stages = {2, 1, 2, 6, 2, 4, 3, 3};
		
		List<Stage> stageList = new ArrayList<>();
		
		for (int i = 1; i <= N; i++) {
			int reachCount = 0;
			int notClear = 0;
			for (int j = 0; j < stages.length; j++) {
				if (i <= stages[j]) {
					reachCount++;
					if(i == stages[j]) {
						notClear++;
					}
				}
			}
			double failPercent = reachCount == 0 ? 0 : (double)notClear/reachCount;
			stageList.add(new Stage(i, failPercent));
		}
		
		Collections.sort(stageList, Comparator.comparingDouble(Stage::getFailPercent).reversed().thenComparingInt(Stage::getNumber));

		int[] answer = new int[N];
		
		for (int i = 0; i < N; i++) {
			answer[i] = stageList.get(i).getNumber();
		}
		
		System.out.println(Arrays.toString(answer));
	}

}

class Stage {
	private int number;
	private double failPercent;
	
	public Stage(int number, double failPercent) {
		this.number = number;
		this.failPercent = failPercent;
	}
	
	public int getNumber() {
		return number;
	}
	
	public double getFailPercent() {
		return failPercent;
	}
}
